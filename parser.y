%{
#include <iostream>
#include "parser.tab.h"
using namespace std;

extern "C" int yylex();
extern "C" int yyparse();

void yyerror(const char *s) {
    cerr << "Parser error: " << s << endl;
}
%}

%token FUNCTION_TOK IDENTIFIER NUMBER BREAK CALL IF ELSE LET READ RETURN WHILE WRITE
%token O_BRACK C_BRACK O_BRACE C_BRACE SEMICOLON EQUAL COMMA
%token PLUS MINUS TIMES DIVIDE MODULUS LESS GREATER LESSOREQUAL GREATEROREQUAL EQUALEQUAL NOTEQUAL
%token AMPERSAND BAR TILDE EXCLAMATION


%start PROGRAM

%%

PROGRAM : FUNCTION_TIMES BLOCK
    ;

FUNCTION_TIMES :
    | FUNCTION FUNCTION_TIMES
    ;

FUNCTION :
    FUNCTION_TOK IDENTIFIER O_BRACK PARAMLIST C_BRACK
    ;

PARAMLIST :
    IDENTIFIER PARAMREST
    |
    ;

PARAMREST :
    COMMA IDENTIFIER PARAMREST
    |
    ;

BLOCK :
    O_BRACE STATEMENT_TIMES C_BRACE
    ;

STATEMENT_TIMES :
    | STATEMENT STATEMENT_TIMES
    ;

STATEMENT :
    BREAK_STATEMENT
    | CALL_STATEMENT
    | IF_STATEMENT
    | LET_STATEMENT
    | READ_STATEMENT
    | RETURN_STATEMENT
    | WHILE_STATEMENT
    | WRITE_STATEMENT
    ;

BREAK_STATEMENT :
    BREAK SEMICOLON
    ;

CALL_STATEMENT :
    CALL IDENTIFIER O_BRACK ARGLIST C_BRACK SEMICOLON
    ;

ARGLIST :
    EXPR ARGREST
    |
    ;

ARGREST :
    COMMA EXPR ARGREST
    |
    ;

IF_STATEMENT :
    IF EXPR BLOCK ELSE_STATEMENT
    ;

ELSE_STATEMENT :
    ELSE BLOCK | /* Empty */
    ;

LET_STATEMENT :
    LET IDENTIFIER EQUAL EXPR SEMICOLON
    | LET IDENTIFIER EQUAL CALL_STATEMENT
    ;

READ_STATEMENT :
    READ IDENTIFIER SEMICOLON
    ;

RETURN_STATEMENT :
    RETURN EXPR SEMICOLON
    ;

WHILE_STATEMENT :
    WHILE EXPR BLOCK
    ;

WRITE_STATEMENT :
    WRITE EXPR SEMICOLON
    ;

EXPR :
    NUMBER
    | IDENTIFIER
    | O_BRACK EXPR C_BRACK
    | O_BRACK UNOP EXPR C_BRACK
    | O_BRACK BINOP EXPR EXPR C_BRACK
    ;

BINOP :
    PLUS | MINUS | TIMES | DIVIDE | MODULUS | AMPERSAND | BAR | LESS | GREATER | LESSOREQUAL | GREATEROREQUAL | EQUALEQUAL
    | NOTEQUAL
    ;

UNOP :
    TILDE | EXCLAMATION
    ;

%%

int main() {
    yyparse();
    return 0;
}
